<template>
    
    <div class="components component-documents" :class="(loading) ? 'loading' : ''">
        <Loading />

        <header class="main-data" :style="'background: linear-gradient(45deg, '+color+', '+color+'b8);'">
            <span class="title">Documents à échéance</span>

            <ul class="actions">
                <li><NuxtLink to="/documents"><span uk-icon="search"></span></NuxtLink></li>
            </ul>
        </header>

        <div class="content">
            <table class="uk-table" v-if="documents.length > 0">
                <thead>
                    <tr>
                        <th>Résident</th>
                        <th>Type</th>
                        <th>Echéance</th>
                        <th>Commentaires</th>
                        <th class="right">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    <tr v-for="(document, index) in documents" :key="index" :class="document.urgent">
                        <td>
                            <template v-if="document.resident !== null">{{ document.resident.lastname }} {{ document.resident.firstname }}</template>
                            <template v-else><span class="relation-bug">Résident supprimé</span></template>
                        </td>
                        <td>{{ document.document_type.name }}</td>
                        <td>{{ moment(document.valid_to).format('DD/MM/YYYY') }}</td>
                        <td>{{ document.comments.length }}</td>
                        <td>
                            <ul class="actions">
                                <li v-if="$auth.user.permissions.includes('documents.id.forceRemove')"><button @click="forceRemove(document)"><span uk-icon='trash'></span></button></li>
                                <li v-if="$auth.user.permissions.includes('documents.id.index')"><NuxtLink :to="'/documents/'+document.id"><span uk-icon='search'></span></NuxtLink></li>
                            </ul>
                        </td>
                    </tr>
                </tbody>
            </table>
            <span class="no-data" v-else>Aucun document à échéance</span>
        </div>
    </div>

</template>

<script>
    import moment from 'moment'

    export default {
        auth: true,
        layout: 'app',
        props: ['color'],
        data() {
            return {
                loading: true,
                documents: []
            }
        },
        mounted() {
            this.loadDocuments()
        },
        methods: {
            loadDocuments() {
                this.documents = []

                this.$axios.get('/api/documents', {
                    params: {
                        term: true,
                        establishment_id: ( JSON.parse(localStorage.getItem('establishmentSelected')) !== null && JSON.parse(localStorage.getItem('establishmentSelected')).id != 'all' ) ? JSON.parse(localStorage.getItem('establishmentSelected')).id : ''
                    }
                })
                .then(response => {
                    let now = moment()

                    response.data.data.documents.map(document => {
                        if ( moment(document.valid_to).isBefore(now) ) {
                            document.urgent = 'red'
                        } else {
                            if ( moment(document.valid_to).subtract(document.document_type.term2, "days").isBefore(now) ) {
                                document.urgent = 'orange'
                            } else {
                                document.urgent = ''
                            }
                        }

                        this.documents.push(document)
                    })

                    this.loading = false
                })
                .catch(error => {
                    UIkit.notification({
                        message: "<span uk-icon='icon: close'></span> Une erreur est survenue, impossible de récupérer les documents !",
                        status: 'danger',
                        timeout: 5000
                    })

                    this.loading = false
                })
            },
            forceRemove(document) {
                this.loading = true

                this.$axios.get('/api/documents/' + document.id + '/forceRemove')
                .then(response => {
                    this.loadDocuments()
                })
                .catch(error => {
                    UIkit.notification({
                        message: "<span uk-icon='icon: close'></span> Une erreur est survenue, impossible de supprimer le document !",
                        status: 'danger',
                        timeout: 5000
                    })

                    this.loading = false
                })
            },
            moment(date) {
                return moment(date)
            }
        }
    }
</script>